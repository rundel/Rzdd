// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/Rzdd.h"
#include <Rcpp.h>

using namespace Rcpp;

// dd_to_dot
std::vector<std::string> dd_to_dot(dd_ptr dd);
RcppExport SEXP _Rzdd_dd_to_dot(SEXP ddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< dd_ptr >::type dd(ddSEXP);
    rcpp_result_gen = Rcpp::wrap(dd_to_dot(dd));
    return rcpp_result_gen;
END_RCPP
}
// dd_to_sapporo
std::vector<std::string> dd_to_sapporo(dd_ptr dd);
RcppExport SEXP _Rzdd_dd_to_sapporo(SEXP ddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< dd_ptr >::type dd(ddSEXP);
    rcpp_result_gen = Rcpp::wrap(dd_to_sapporo(dd));
    return rcpp_result_gen;
END_RCPP
}
// dd_size
int dd_size(dd_ptr dd);
RcppExport SEXP _Rzdd_dd_size(SEXP ddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< dd_ptr >::type dd(ddSEXP);
    rcpp_result_gen = Rcpp::wrap(dd_size(dd));
    return rcpp_result_gen;
END_RCPP
}
// dd_cardinality
double dd_cardinality(dd_ptr dd);
RcppExport SEXP _Rzdd_dd_cardinality(SEXP ddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< dd_ptr >::type dd(ddSEXP);
    rcpp_result_gen = Rcpp::wrap(dd_cardinality(dd));
    return rcpp_result_gen;
END_RCPP
}
// dd_solutions
std::vector<std::vector<int>> dd_solutions(dd_ptr dd, bool use_obi);
RcppExport SEXP _Rzdd_dd_solutions(SEXP ddSEXP, SEXP use_obiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< dd_ptr >::type dd(ddSEXP);
    Rcpp::traits::input_parameter< bool >::type use_obi(use_obiSEXP);
    rcpp_result_gen = Rcpp::wrap(dd_solutions(dd, use_obi));
    return rcpp_result_gen;
END_RCPP
}
// enum_part_alg
Rcpp::List enum_part_alg(std::vector<std::vector<unsigned int>> adj, int n_part, bool lookahead, bool noloop, bool verbose, bool use_openmp, bool reduce);
RcppExport SEXP _Rzdd_enum_part_alg(SEXP adjSEXP, SEXP n_partSEXP, SEXP lookaheadSEXP, SEXP noloopSEXP, SEXP verboseSEXP, SEXP use_openmpSEXP, SEXP reduceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<unsigned int>> >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type n_part(n_partSEXP);
    Rcpp::traits::input_parameter< bool >::type lookahead(lookaheadSEXP);
    Rcpp::traits::input_parameter< bool >::type noloop(noloopSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type use_openmp(use_openmpSEXP);
    Rcpp::traits::input_parameter< bool >::type reduce(reduceSEXP);
    rcpp_result_gen = Rcpp::wrap(enum_part_alg(adj, n_part, lookahead, noloop, verbose, use_openmp, reduce));
    return rcpp_result_gen;
END_RCPP
}
// min_max_constrain
Rcpp::List min_max_constrain(Rcpp::List zdd, std::vector<unsigned int> weights, unsigned int lower, unsigned int upper);
RcppExport SEXP _Rzdd_min_max_constrain(SEXP zddSEXP, SEXP weightsSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type zdd(zddSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(min_max_constrain(zdd, weights, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// ratio_constrain
Rcpp::List ratio_constrain(Rcpp::List zdd, std::vector<unsigned int> weights, double ratio);
RcppExport SEXP _Rzdd_ratio_constrain(SEXP zddSEXP, SEXP weightsSEXP, SEXP ratioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type zdd(zddSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type ratio(ratioSEXP);
    rcpp_result_gen = Rcpp::wrap(ratio_constrain(zdd, weights, ratio));
    return rcpp_result_gen;
END_RCPP
}
// compute_frontier
std::vector<std::vector<int>> compute_frontier(std::vector<std::vector<unsigned int>> adj_list);
RcppExport SEXP _Rzdd_compute_frontier(SEXP adj_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<unsigned int>> >::type adj_list(adj_listSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_frontier(adj_list));
    return rcpp_result_gen;
END_RCPP
}
// partition_alg
Rcpp::List partition_alg(std::vector<std::vector<unsigned int>> adj_list, std::vector<weight_type> weights, weight_type min_w, weight_type max_w, int n_part, bool reduce);
RcppExport SEXP _Rzdd_partition_alg(SEXP adj_listSEXP, SEXP weightsSEXP, SEXP min_wSEXP, SEXP max_wSEXP, SEXP n_partSEXP, SEXP reduceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<unsigned int>> >::type adj_list(adj_listSEXP);
    Rcpp::traits::input_parameter< std::vector<weight_type> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< weight_type >::type min_w(min_wSEXP);
    Rcpp::traits::input_parameter< weight_type >::type max_w(max_wSEXP);
    Rcpp::traits::input_parameter< int >::type n_part(n_partSEXP);
    Rcpp::traits::input_parameter< bool >::type reduce(reduceSEXP);
    rcpp_result_gen = Rcpp::wrap(partition_alg(adj_list, weights, min_w, max_w, n_part, reduce));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rzdd_dd_to_dot", (DL_FUNC) &_Rzdd_dd_to_dot, 1},
    {"_Rzdd_dd_to_sapporo", (DL_FUNC) &_Rzdd_dd_to_sapporo, 1},
    {"_Rzdd_dd_size", (DL_FUNC) &_Rzdd_dd_size, 1},
    {"_Rzdd_dd_cardinality", (DL_FUNC) &_Rzdd_dd_cardinality, 1},
    {"_Rzdd_dd_solutions", (DL_FUNC) &_Rzdd_dd_solutions, 2},
    {"_Rzdd_enum_part_alg", (DL_FUNC) &_Rzdd_enum_part_alg, 7},
    {"_Rzdd_min_max_constrain", (DL_FUNC) &_Rzdd_min_max_constrain, 4},
    {"_Rzdd_ratio_constrain", (DL_FUNC) &_Rzdd_ratio_constrain, 3},
    {"_Rzdd_compute_frontier", (DL_FUNC) &_Rzdd_compute_frontier, 1},
    {"_Rzdd_partition_alg", (DL_FUNC) &_Rzdd_partition_alg, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rzdd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
